# thymeleaf
// 在controller中返回模板的时候我们只需要写html文件的名字，是因为在返回的时候默认按照下面的两个配置，在前面拼接上了/templates/这个前缀，在后面拼接上了这个.html后缀，所以系统才找到了我们要返回的模板
spring.thymeleaf.prefix=classpath:/templates/
spring.thymeleaf.suffix=.html
// 不开启缓存，因为开发的时候开了缓存会影响我们的开发，之前已经碰到好多次了
spring.thymeleaf.cache=false
spring.thymeleaf.content-type=text/html
spring.thymeleaf.enabled=true
spring.thymeleaf.encoding=UTF-8
spring.thymeleaf.mode=HTML5

# mybatis
# 在这个路径下存储和数据库表字段对应的对象
mybatis.type-aliases-package=pers.cy.speedkillsystem.domain
# 将下划线转换成驼峰命名，这样能自动关联数据库表中字段名称和Java对象属性名称
mybatis.configuration.map-underscore-to-camel-case=true
mybatis.configuration.default-fetch-size=100
mybatis.configuration.default-statement-timeout=3000
# mybatis要扫描的xml配置路径，对表的一些操作的XML全都写在这个路径下
mybatis.mapperLocations = pers.cy.speedkillsystem.dao/*.xml

# druid
# 以下为配置JDBC连接
spring.datasource.url=jdbc:mysql://localhost:3306/speed_kill_system?useUnicode=true&characterEncoding=utf-8&allowMultiQueries=true&useSSL=false
spring.datasource.username=root
spring.datasource.password=123456
# JDBC驱动
spring.datasource.driver-class-name=com.mysql.jdbc.Driver
# 配置数据源，其实也就是配置连接池，有的时候数据源和连接池可以看成一个东西，但严谨的说并不是一种东西
spring.datasource.type=com.alibaba.druid.pool.DruidDataSource
spring.datasource.filters=stat
# 最大连接
spring.datasource.maxActive=1000
# 连接池初始大小
spring.datasource.initialSize=100
# 最大等待时间
spring.datasource.maxWait=60000
# 最小空闲连接，大于这个数的空闲连接就会被销毁
spring.datasource.minIdle=500
spring.datasource.timeBetweenEvictionRunsMillis=60000
spring.datasource.minEvictableIdleTimeMillis=300000
spring.datasource.validationQuery=select 'x'
spring.datasource.testWhileIdle=true
spring.datasource.testOnBorrow=false
spring.datasource.testOnReturn=false
spring.datasource.poolPreparedStatements=true
spring.datasource.maxOpenPreparedStatements=20

#redis
redis.host=localhost
redis.port=6379
redis.timeout=10
# redis连接池
# 最大连接数
redis.poolMaxTotal=1000
# 最大控线量
redis.poolMaxIdle=500
# 最长等待时间
redis.poolMaxWait=500

# static 静态页面配置
# 是否启动静态资源处理
spring.resources.add-mappings=true
# 本地缓存的有效时长 过了这个时长就还需要向服务器请求资源
spring.resources.cache-period= 3600
spring.resources.chain.cache=true 
spring.resources.chain.enabled=true
spring.resources.chain.gzipped=true
spring.resources.chain.html-application-cache=true
# 静态文件的路径
spring.resources.static-locations=classpath:/static/


#RabbitMQ配置
# 服务器IP
spring.rabbitmq.host=127.0.0.1
# 端口  这里注意端口不是可视化的端口15672，而是服务端连接端口
spring.rabbitmq.port=5672
# 访问用户名和密码
spring.rabbitmq.username=guest
spring.rabbitmq.password=guest
spring.rabbitmq.virtual-host=/
#消费者数量
spring.rabbitmq.listener.simple.concurrency= 10
spring.rabbitmq.listener.simple.max-concurrency= 10
#消费者每次从队列获取的消息数量
spring.rabbitmq.listener.simple.prefetch= 1
#消费者自动启动
spring.rabbitmq.listener.simple.auto-startup=true
#消费失败，自动重新入队
spring.rabbitmq.listener.simple.default-requeue-rejected= true
#启用发送重试
spring.rabbitmq.template.retry.enabled=true 
# 失败后各一秒重试一次
spring.rabbitmq.template.retry.initial-interval=1000 
# 最多重试3次
spring.rabbitmq.template.retry.max-attempts=3
# 最大间隔
spring.rabbitmq.template.retry.max-interval=10000
# 等待时长等分比，比如这里设置2，就是说可以设置第一次重试等1秒，第二次等2秒，第三次等4秒，每次都乘2
spring.rabbitmq.template.retry.multiplier=1.0